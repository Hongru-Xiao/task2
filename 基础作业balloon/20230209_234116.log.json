{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr\nNVCC: Cuda compilation tools, release 10.1, V10.1.24\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            '/home/xiaohongru/pytorch_learn/mmdetection/configs/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(480, 1333), (512, 1333), (544, 1333), (576, 1333),\n                          (608, 1333), (640, 1333), (672, 1333), (704, 1333),\n                          (736, 1333), (768, 1333), (800, 1333)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }],\n                  [{\n                      'type': 'Resize',\n                      'img_scale': [(400, 1333), (500, 1333), (600, 1333)],\n                      'multiscale_mode': 'value',\n                      'keep_ratio': True\n                  }, {\n                      'type': 'RandomCrop',\n                      'crop_type': 'absolute_range',\n                      'crop_size': (384, 600),\n                      'allow_negative_crop': True\n                  }, {\n                      'type':\n                      'Resize',\n                      'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                    (576, 1333), (608, 1333), (640, 1333),\n                                    (672, 1333), (704, 1333), (736, 1333),\n                                    (768, 1333), (800, 1333)],\n                      'multiscale_mode':\n                      'value',\n                      'override':\n                      True,\n                      'keep_ratio':\n                      True\n                  }]]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\nload_from = '/home/xiaohongru/pytorch_learn/mmdetection/configs/mask_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco_20210903_104808-b92c91f1.pth'\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/xiaohongru/pytorch_learn/mmdetection/balloon/annotations/train.json',\n        img_prefix='/home/xiaohongru/pytorch_learn/mmdetection/balloon/train/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type':\n                    'Resize',\n                    'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                  (576, 1333), (608, 1333), (640, 1333),\n                                  (672, 1333), (704, 1333), (736, 1333),\n                                  (768, 1333), (800, 1333)],\n                    'multiscale_mode':\n                    'value',\n                    'keep_ratio':\n                    True\n                }],\n                          [{\n                              'type': 'Resize',\n                              'img_scale': [(400, 1333), (500, 1333),\n                                            (600, 1333)],\n                              'multiscale_mode': 'value',\n                              'keep_ratio': True\n                          }, {\n                              'type': 'RandomCrop',\n                              'crop_type': 'absolute_range',\n                              'crop_size': (384, 600),\n                              'allow_negative_crop': True\n                          }, {\n                              'type':\n                              'Resize',\n                              'img_scale': [(480, 1333), (512, 1333),\n                                            (544, 1333), (576, 1333),\n                                            (608, 1333), (640, 1333),\n                                            (672, 1333), (704, 1333),\n                                            (736, 1333), (768, 1333),\n                                            (800, 1333)],\n                              'multiscale_mode':\n                              'value',\n                              'override':\n                              True,\n                              'keep_ratio':\n                              True\n                          }]]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/xiaohongru/pytorch_learn/mmdetection/balloon/annotations/val.json',\n        img_prefix='/home/xiaohongru/pytorch_learn/mmdetection/balloon/val/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/xiaohongru/pytorch_learn/mmdetection/balloon/annotations/val.json',\n        img_prefix='/home/xiaohongru/pytorch_learn/mmdetection/balloon/val/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.001,\n    step=[27, 33])\nrunner = dict(type='EpochBasedRunner', max_epochs=40)\ncheckpoint_config = dict(interval=20)\nlog_config = dict(interval=25, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = '/home/xiaohongru/pytorch_learn/mmdetection/configs/swin_small_patch4_window7_224.pth'\nfp16 = dict(loss_scale=dict(init_scale=512))\nwork_dir = './work_dirs/maskrcnn'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1086735516, "exp_name": "maskrcnn.py"}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 0.0, "memory": 3843, "data_time": 0.11502, "loss_rpn_cls": 0.09311, "loss_rpn_bbox": 0.01513, "loss_cls": 0.81696, "acc": 28.73438, "loss_bbox": 0.24898, "loss_mask": 8.60297, "loss": 9.77715, "time": 0.43076}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 3843, "data_time": 0.01534, "loss_rpn_cls": 0.1787, "loss_rpn_bbox": 0.01841, "loss_cls": 0.72638, "acc": 47.27344, "loss_bbox": 0.27148, "loss_mask": 6.37924, "loss": 7.57423, "time": 0.31549}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.017, "bbox_mAP_50": 0.056, "bbox_mAP_75": 0.0068, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.01, "bbox_mAP_l": 0.0546, "bbox_mAP_copypaste": "0.0170 0.0560 0.0068 0.0000 0.0100 0.0546", "segm_mAP": 0.0071, "segm_mAP_50": 0.0217, "segm_mAP_75": 0.0012, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.054, "segm_mAP_copypaste": "0.0071 0.0217 0.0012 0.0000 0.0000 0.0540"}
{"mode": "train", "epoch": 2, "iter": 25, "lr": 1e-05, "memory": 3843, "data_time": 0.11148, "loss_rpn_cls": 0.12459, "loss_rpn_bbox": 0.0157, "loss_cls": 0.58863, "acc": 74.61719, "loss_bbox": 0.19061, "loss_mask": 2.48384, "loss": 3.40336, "time": 0.40434}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 1e-05, "memory": 3843, "data_time": 0.01624, "loss_rpn_cls": 0.10758, "loss_rpn_bbox": 0.02258, "loss_cls": 0.48207, "acc": 86.78906, "loss_bbox": 0.35175, "loss_mask": 1.68934, "loss": 2.65331, "time": 0.30564}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.0659, "bbox_mAP_50": 0.139, "bbox_mAP_75": 0.0562, "bbox_mAP_s": 0.0021, "bbox_mAP_m": 0.0524, "bbox_mAP_l": 0.1661, "bbox_mAP_copypaste": "0.0659 0.1390 0.0562 0.0021 0.0524 0.1661", "segm_mAP": 0.047, "segm_mAP_50": 0.1039, "segm_mAP_75": 0.043, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0144, "segm_mAP_l": 0.3039, "segm_mAP_copypaste": "0.0470 0.1039 0.0430 0.0000 0.0144 0.3039"}
{"mode": "train", "epoch": 3, "iter": 25, "lr": 1e-05, "memory": 3987, "data_time": 0.11691, "loss_rpn_cls": 0.06648, "loss_rpn_bbox": 0.01407, "loss_cls": 0.33133, "acc": 90.9375, "loss_bbox": 0.37095, "loss_mask": 0.9469, "loss": 1.72974, "time": 0.39613}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 2e-05, "memory": 3987, "data_time": 0.01476, "loss_rpn_cls": 0.08863, "loss_rpn_bbox": 0.01421, "loss_cls": 0.2396, "acc": 93.05469, "loss_bbox": 0.25853, "loss_mask": 0.56575, "loss": 1.16673, "time": 0.29169}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 2e-05, "bbox_mAP": 0.3986, "bbox_mAP_50": 0.5533, "bbox_mAP_75": 0.4258, "bbox_mAP_s": 0.0064, "bbox_mAP_m": 0.325, "bbox_mAP_l": 0.5386, "bbox_mAP_copypaste": "0.3986 0.5533 0.4258 0.0064 0.3250 0.5386", "segm_mAP": 0.3672, "segm_mAP_50": 0.5498, "segm_mAP_75": 0.3767, "segm_mAP_s": 0.0004, "segm_mAP_m": 0.2247, "segm_mAP_l": 0.6382, "segm_mAP_copypaste": "0.3672 0.5498 0.3767 0.0004 0.2247 0.6382"}
{"mode": "train", "epoch": 4, "iter": 25, "lr": 2e-05, "memory": 3987, "data_time": 0.11176, "loss_rpn_cls": 0.03837, "loss_rpn_bbox": 0.01025, "loss_cls": 0.17001, "acc": 93.625, "loss_bbox": 0.25489, "loss_mask": 0.42809, "loss": 0.90161, "time": 0.39081}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 2e-05, "memory": 4125, "data_time": 0.01417, "loss_rpn_cls": 0.04681, "loss_rpn_bbox": 0.01589, "loss_cls": 0.20805, "acc": 89.57812, "loss_bbox": 0.43702, "loss_mask": 0.38293, "loss": 1.0907, "time": 0.29257}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 2e-05, "bbox_mAP": 0.6256, "bbox_mAP_50": 0.8067, "bbox_mAP_75": 0.7051, "bbox_mAP_s": 0.0093, "bbox_mAP_m": 0.5483, "bbox_mAP_l": 0.685, "bbox_mAP_copypaste": "0.6256 0.8067 0.7051 0.0093 0.5483 0.6850", "segm_mAP": 0.6218, "segm_mAP_50": 0.801, "segm_mAP_75": 0.7474, "segm_mAP_s": 0.0014, "segm_mAP_m": 0.4468, "segm_mAP_l": 0.7436, "segm_mAP_copypaste": "0.6218 0.8010 0.7474 0.0014 0.4468 0.7436"}
{"mode": "train", "epoch": 5, "iter": 25, "lr": 3e-05, "memory": 4125, "data_time": 0.1103, "loss_rpn_cls": 0.04108, "loss_rpn_bbox": 0.01106, "loss_cls": 0.14843, "acc": 93.95312, "loss_bbox": 0.27777, "loss_mask": 0.23233, "loss": 0.71068, "time": 0.382}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 3e-05, "memory": 4125, "data_time": 0.01552, "loss_rpn_cls": 0.02434, "loss_rpn_bbox": 0.01153, "loss_cls": 0.14129, "acc": 94.03125, "loss_bbox": 0.33289, "loss_mask": 0.3062, "loss": 0.81625, "time": 0.29798}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 3e-05, "bbox_mAP": 0.6599, "bbox_mAP_50": 0.8405, "bbox_mAP_75": 0.7938, "bbox_mAP_s": 0.0253, "bbox_mAP_m": 0.5993, "bbox_mAP_l": 0.7123, "bbox_mAP_copypaste": "0.6599 0.8405 0.7938 0.0253 0.5993 0.7123", "segm_mAP": 0.7027, "segm_mAP_50": 0.837, "segm_mAP_75": 0.8172, "segm_mAP_s": 0.0074, "segm_mAP_m": 0.529, "segm_mAP_l": 0.7905, "segm_mAP_copypaste": "0.7027 0.8370 0.8172 0.0074 0.5290 0.7905"}
{"mode": "train", "epoch": 6, "iter": 25, "lr": 3e-05, "memory": 4125, "data_time": 0.10606, "loss_rpn_cls": 0.0226, "loss_rpn_bbox": 0.01269, "loss_cls": 0.10322, "acc": 96.65625, "loss_bbox": 0.20777, "loss_mask": 0.20292, "loss": 0.5492, "time": 0.38966}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 4e-05, "memory": 4125, "data_time": 0.016, "loss_rpn_cls": 0.01503, "loss_rpn_bbox": 0.01523, "loss_cls": 0.12141, "acc": 95.53906, "loss_bbox": 0.18948, "loss_mask": 0.21243, "loss": 0.55358, "time": 0.3069}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 4e-05, "bbox_mAP": 0.7207, "bbox_mAP_50": 0.8835, "bbox_mAP_75": 0.852, "bbox_mAP_s": 0.0469, "bbox_mAP_m": 0.6607, "bbox_mAP_l": 0.7746, "bbox_mAP_copypaste": "0.7207 0.8835 0.8520 0.0469 0.6607 0.7746", "segm_mAP": 0.7468, "segm_mAP_50": 0.8835, "segm_mAP_75": 0.8478, "segm_mAP_s": 0.0087, "segm_mAP_m": 0.5829, "segm_mAP_l": 0.8358, "segm_mAP_copypaste": "0.7468 0.8835 0.8478 0.0087 0.5829 0.8358"}
{"mode": "train", "epoch": 7, "iter": 25, "lr": 4e-05, "memory": 4125, "data_time": 0.11074, "loss_rpn_cls": 0.01709, "loss_rpn_bbox": 0.01154, "loss_cls": 0.07575, "acc": 97.25781, "loss_bbox": 0.10769, "loss_mask": 0.15961, "loss": 0.37167, "time": 0.39493}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 4e-05, "memory": 4125, "data_time": 0.01392, "loss_rpn_cls": 0.02032, "loss_rpn_bbox": 0.01069, "loss_cls": 0.09293, "acc": 96.74219, "loss_bbox": 0.12868, "loss_mask": 0.15048, "loss": 0.4031, "time": 0.29459}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 4e-05, "bbox_mAP": 0.7577, "bbox_mAP_50": 0.886, "bbox_mAP_75": 0.8646, "bbox_mAP_s": 0.0842, "bbox_mAP_m": 0.6989, "bbox_mAP_l": 0.8173, "bbox_mAP_copypaste": "0.7577 0.8860 0.8646 0.0842 0.6989 0.8173", "segm_mAP": 0.7683, "segm_mAP_50": 0.886, "segm_mAP_75": 0.8508, "segm_mAP_s": 0.0063, "segm_mAP_m": 0.6256, "segm_mAP_l": 0.8482, "segm_mAP_copypaste": "0.7683 0.8860 0.8508 0.0063 0.6256 0.8482"}
{"mode": "train", "epoch": 8, "iter": 25, "lr": 5e-05, "memory": 4234, "data_time": 0.10688, "loss_rpn_cls": 0.01585, "loss_rpn_bbox": 0.01087, "loss_cls": 0.07362, "acc": 97.29688, "loss_bbox": 0.11135, "loss_mask": 0.12697, "loss": 0.33867, "time": 0.39658}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 5e-05, "memory": 4234, "data_time": 0.01111, "loss_rpn_cls": 0.01575, "loss_rpn_bbox": 0.01036, "loss_cls": 0.06664, "acc": 97.67969, "loss_bbox": 0.10651, "loss_mask": 0.1212, "loss": 0.32046, "time": 0.28414}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 5e-05, "bbox_mAP": 0.7361, "bbox_mAP_50": 0.8931, "bbox_mAP_75": 0.8701, "bbox_mAP_s": 0.0202, "bbox_mAP_m": 0.665, "bbox_mAP_l": 0.7951, "bbox_mAP_copypaste": "0.7361 0.8931 0.8701 0.0202 0.6650 0.7951", "segm_mAP": 0.7677, "segm_mAP_50": 0.8931, "segm_mAP_75": 0.8701, "segm_mAP_s": 0.0101, "segm_mAP_m": 0.6152, "segm_mAP_l": 0.8504, "segm_mAP_copypaste": "0.7677 0.8931 0.8701 0.0101 0.6152 0.8504"}
{"mode": "train", "epoch": 9, "iter": 25, "lr": 5e-05, "memory": 4234, "data_time": 0.10957, "loss_rpn_cls": 0.01196, "loss_rpn_bbox": 0.00725, "loss_cls": 0.06365, "acc": 97.61719, "loss_bbox": 0.08743, "loss_mask": 0.08972, "loss": 0.26002, "time": 0.39267}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 5e-05, "memory": 4234, "data_time": 0.01537, "loss_rpn_cls": 0.00777, "loss_rpn_bbox": 0.01265, "loss_cls": 0.06264, "acc": 97.64844, "loss_bbox": 0.10563, "loss_mask": 0.1338, "loss": 0.32249, "time": 0.3003}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 5e-05, "bbox_mAP": 0.7537, "bbox_mAP_50": 0.8972, "bbox_mAP_75": 0.855, "bbox_mAP_s": 0.0842, "bbox_mAP_m": 0.6752, "bbox_mAP_l": 0.815, "bbox_mAP_copypaste": "0.7537 0.8972 0.8550 0.0842 0.6752 0.8150", "segm_mAP": 0.7923, "segm_mAP_50": 0.8972, "segm_mAP_75": 0.873, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.6569, "segm_mAP_l": 0.8705, "segm_mAP_copypaste": "0.7923 0.8972 0.8730 0.0252 0.6569 0.8705"}
{"mode": "train", "epoch": 10, "iter": 25, "lr": 6e-05, "memory": 4234, "data_time": 0.11073, "loss_rpn_cls": 0.00842, "loss_rpn_bbox": 0.0065, "loss_cls": 0.04251, "acc": 98.32812, "loss_bbox": 0.07295, "loss_mask": 0.08409, "loss": 0.21447, "time": 0.33035}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 6e-05, "memory": 4234, "data_time": 0.02087, "loss_rpn_cls": 0.01149, "loss_rpn_bbox": 0.0165, "loss_cls": 0.0792, "acc": 96.94531, "loss_bbox": 0.12685, "loss_mask": 0.12668, "loss": 0.36072, "time": 0.39734}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.7603, "bbox_mAP_50": 0.8982, "bbox_mAP_75": 0.8535, "bbox_mAP_s": 0.1262, "bbox_mAP_m": 0.7103, "bbox_mAP_l": 0.8086, "bbox_mAP_copypaste": "0.7603 0.8982 0.8535 0.1262 0.7103 0.8086", "segm_mAP": 0.7798, "segm_mAP_50": 0.8982, "segm_mAP_75": 0.8535, "segm_mAP_s": 0.0631, "segm_mAP_m": 0.677, "segm_mAP_l": 0.8417, "segm_mAP_copypaste": "0.7798 0.8982 0.8535 0.0631 0.6770 0.8417"}
{"mode": "train", "epoch": 11, "iter": 25, "lr": 6e-05, "memory": 4234, "data_time": 0.10464, "loss_rpn_cls": 0.00559, "loss_rpn_bbox": 0.00733, "loss_cls": 0.04365, "acc": 98.375, "loss_bbox": 0.08488, "loss_mask": 0.08756, "loss": 0.22902, "time": 0.3869}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 7e-05, "memory": 4234, "data_time": 0.01948, "loss_rpn_cls": 0.01233, "loss_rpn_bbox": 0.01225, "loss_cls": 0.062, "acc": 97.75, "loss_bbox": 0.10672, "loss_mask": 0.12661, "loss": 0.31991, "time": 0.30493}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 7e-05, "bbox_mAP": 0.7488, "bbox_mAP_50": 0.9059, "bbox_mAP_75": 0.8283, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6835, "bbox_mAP_l": 0.8085, "bbox_mAP_copypaste": "0.7488 0.9059 0.8283 0.1010 0.6835 0.8085", "segm_mAP": 0.7874, "segm_mAP_50": 0.899, "segm_mAP_75": 0.8389, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.6556, "segm_mAP_l": 0.8715, "segm_mAP_copypaste": "0.7874 0.8990 0.8389 0.0505 0.6556 0.8715"}
{"mode": "train", "epoch": 12, "iter": 25, "lr": 7e-05, "memory": 4234, "data_time": 0.11169, "loss_rpn_cls": 0.01047, "loss_rpn_bbox": 0.01215, "loss_cls": 0.05525, "acc": 97.85156, "loss_bbox": 0.10203, "loss_mask": 0.08794, "loss": 0.26783, "time": 0.41097}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 7e-05, "memory": 4234, "data_time": 0.01172, "loss_rpn_cls": 0.00295, "loss_rpn_bbox": 0.0053, "loss_cls": 0.03985, "acc": 98.39844, "loss_bbox": 0.07374, "loss_mask": 0.07604, "loss": 0.19788, "time": 0.28619}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 7e-05, "bbox_mAP": 0.7547, "bbox_mAP_50": 0.904, "bbox_mAP_75": 0.8569, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.6768, "bbox_mAP_l": 0.8154, "bbox_mAP_copypaste": "0.7547 0.9040 0.8569 0.0757 0.6768 0.8154", "segm_mAP": 0.7875, "segm_mAP_50": 0.904, "segm_mAP_75": 0.8569, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.6403, "segm_mAP_l": 0.8703, "segm_mAP_copypaste": "0.7875 0.9040 0.8569 0.0673 0.6403 0.8703"}
{"mode": "train", "epoch": 13, "iter": 25, "lr": 8e-05, "memory": 4234, "data_time": 0.11235, "loss_rpn_cls": 0.00848, "loss_rpn_bbox": 0.01126, "loss_cls": 0.04994, "acc": 98.0625, "loss_bbox": 0.08941, "loss_mask": 0.08785, "loss": 0.24694, "time": 0.39565}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 8e-05, "memory": 4234, "data_time": 0.01439, "loss_rpn_cls": 0.00794, "loss_rpn_bbox": 0.01154, "loss_cls": 0.04246, "acc": 98.4375, "loss_bbox": 0.07941, "loss_mask": 0.07186, "loss": 0.21321, "time": 0.29084}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 8e-05, "bbox_mAP": 0.7497, "bbox_mAP_50": 0.9088, "bbox_mAP_75": 0.8775, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.6921, "bbox_mAP_l": 0.8054, "bbox_mAP_copypaste": "0.7497 0.9088 0.8775 0.0757 0.6921 0.8054", "segm_mAP": 0.8008, "segm_mAP_50": 0.9088, "segm_mAP_75": 0.8775, "segm_mAP_s": 0.101, "segm_mAP_m": 0.6551, "segm_mAP_l": 0.8816, "segm_mAP_copypaste": "0.8008 0.9088 0.8775 0.1010 0.6551 0.8816"}
{"mode": "train", "epoch": 14, "iter": 25, "lr": 8e-05, "memory": 4234, "data_time": 0.10943, "loss_rpn_cls": 0.00378, "loss_rpn_bbox": 0.00657, "loss_cls": 0.03361, "acc": 98.82812, "loss_bbox": 0.0686, "loss_mask": 0.06896, "loss": 0.18152, "time": 0.38244}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 8e-05, "memory": 4234, "data_time": 0.01867, "loss_rpn_cls": 0.00891, "loss_rpn_bbox": 0.01362, "loss_cls": 0.05967, "acc": 97.75, "loss_bbox": 0.11145, "loss_mask": 0.08878, "loss": 0.28243, "time": 0.31058}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 9e-05, "bbox_mAP": 0.7504, "bbox_mAP_50": 0.9099, "bbox_mAP_75": 0.8792, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6974, "bbox_mAP_l": 0.8051, "bbox_mAP_copypaste": "0.7504 0.9099 0.8792 0.1010 0.6974 0.8051", "segm_mAP": 0.805, "segm_mAP_50": 0.9099, "segm_mAP_75": 0.8596, "segm_mAP_s": 0.202, "segm_mAP_m": 0.6803, "segm_mAP_l": 0.8792, "segm_mAP_copypaste": "0.8050 0.9099 0.8596 0.2020 0.6803 0.8792"}
{"mode": "train", "epoch": 15, "iter": 25, "lr": 9e-05, "memory": 4234, "data_time": 0.10704, "loss_rpn_cls": 0.0138, "loss_rpn_bbox": 0.01012, "loss_cls": 0.04786, "acc": 98.13281, "loss_bbox": 0.08709, "loss_mask": 0.07452, "loss": 0.23338, "time": 0.39264}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 9e-05, "memory": 4234, "data_time": 0.01556, "loss_rpn_cls": 0.01072, "loss_rpn_bbox": 0.01096, "loss_cls": 0.0353, "acc": 98.60938, "loss_bbox": 0.07359, "loss_mask": 0.07352, "loss": 0.20409, "time": 0.29804}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 9e-05, "bbox_mAP": 0.7792, "bbox_mAP_50": 0.9157, "bbox_mAP_75": 0.8862, "bbox_mAP_s": 0.2525, "bbox_mAP_m": 0.719, "bbox_mAP_l": 0.83, "bbox_mAP_copypaste": "0.7792 0.9157 0.8862 0.2525 0.7190 0.8300", "segm_mAP": 0.8278, "segm_mAP_50": 0.9157, "segm_mAP_75": 0.9043, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7079, "segm_mAP_l": 0.8977, "segm_mAP_copypaste": "0.8278 0.9157 0.9043 0.3030 0.7079 0.8977"}
{"mode": "train", "epoch": 16, "iter": 25, "lr": 9e-05, "memory": 4234, "data_time": 0.11568, "loss_rpn_cls": 0.00366, "loss_rpn_bbox": 0.00708, "loss_cls": 0.04246, "acc": 98.27344, "loss_bbox": 0.07342, "loss_mask": 0.07027, "loss": 0.19688, "time": 0.39659}
{"mode": "train", "epoch": 16, "iter": 50, "lr": 0.0001, "memory": 4234, "data_time": 0.01682, "loss_rpn_cls": 0.00414, "loss_rpn_bbox": 0.01216, "loss_cls": 0.04144, "acc": 98.42969, "loss_bbox": 0.0746, "loss_mask": 0.06893, "loss": 0.20127, "time": 0.30056}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7787, "bbox_mAP_50": 0.9175, "bbox_mAP_75": 0.8862, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7095, "bbox_mAP_l": 0.837, "bbox_mAP_copypaste": "0.7787 0.9175 0.8862 0.1515 0.7095 0.8370", "segm_mAP": 0.828, "segm_mAP_50": 0.9175, "segm_mAP_75": 0.8862, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.6878, "segm_mAP_l": 0.9096, "segm_mAP_copypaste": "0.8280 0.9175 0.8862 0.1515 0.6878 0.9096"}
{"mode": "train", "epoch": 17, "iter": 25, "lr": 0.0001, "memory": 4234, "data_time": 0.10601, "loss_rpn_cls": 0.00576, "loss_rpn_bbox": 0.00846, "loss_cls": 0.04719, "acc": 98.10156, "loss_bbox": 0.08915, "loss_mask": 0.07439, "loss": 0.22495, "time": 0.39054}
{"mode": "train", "epoch": 17, "iter": 50, "lr": 0.0001, "memory": 4234, "data_time": 0.0153, "loss_rpn_cls": 0.01007, "loss_rpn_bbox": 0.01394, "loss_cls": 0.05432, "acc": 97.875, "loss_bbox": 0.0862, "loss_mask": 0.07097, "loss": 0.2355, "time": 0.28587}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7619, "bbox_mAP_50": 0.9171, "bbox_mAP_75": 0.8677, "bbox_mAP_s": 0.2525, "bbox_mAP_m": 0.6914, "bbox_mAP_l": 0.8143, "bbox_mAP_copypaste": "0.7619 0.9171 0.8677 0.2525 0.6914 0.8143", "segm_mAP": 0.8175, "segm_mAP_50": 0.9171, "segm_mAP_75": 0.8855, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7039, "segm_mAP_l": 0.8857, "segm_mAP_copypaste": "0.8175 0.9171 0.8855 0.3030 0.7039 0.8857"}
{"mode": "train", "epoch": 18, "iter": 25, "lr": 0.0001, "memory": 4234, "data_time": 0.11611, "loss_rpn_cls": 0.00283, "loss_rpn_bbox": 0.00928, "loss_cls": 0.04042, "acc": 98.40625, "loss_bbox": 0.07541, "loss_mask": 0.06632, "loss": 0.19427, "time": 0.39631}
{"mode": "train", "epoch": 18, "iter": 50, "lr": 0.0001, "memory": 4234, "data_time": 0.01696, "loss_rpn_cls": 0.00456, "loss_rpn_bbox": 0.01138, "loss_cls": 0.04122, "acc": 98.35156, "loss_bbox": 0.07324, "loss_mask": 0.06196, "loss": 0.19236, "time": 0.28729}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7735, "bbox_mAP_50": 0.9331, "bbox_mAP_75": 0.8981, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.709, "bbox_mAP_l": 0.8275, "bbox_mAP_copypaste": "0.7735 0.9331 0.8981 0.1010 0.7090 0.8275", "segm_mAP": 0.8272, "segm_mAP_50": 0.9331, "segm_mAP_75": 0.8981, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.7085, "segm_mAP_l": 0.8945, "segm_mAP_copypaste": "0.8272 0.9331 0.8981 0.2525 0.7085 0.8945"}
{"mode": "train", "epoch": 19, "iter": 25, "lr": 0.0001, "memory": 4234, "data_time": 0.11104, "loss_rpn_cls": 0.00259, "loss_rpn_bbox": 0.00653, "loss_cls": 0.02875, "acc": 98.9375, "loss_bbox": 0.06656, "loss_mask": 0.06418, "loss": 0.16861, "time": 0.39337}
{"mode": "train", "epoch": 19, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01956, "loss_rpn_cls": 0.00261, "loss_rpn_bbox": 0.0078, "loss_cls": 0.03117, "acc": 98.80469, "loss_bbox": 0.06189, "loss_mask": 0.0628, "loss": 0.16626, "time": 0.28513}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7859, "bbox_mAP_50": 0.932, "bbox_mAP_75": 0.9069, "bbox_mAP_s": 0.303, "bbox_mAP_m": 0.7244, "bbox_mAP_l": 0.8242, "bbox_mAP_copypaste": "0.7859 0.9320 0.9069 0.3030 0.7244 0.8242", "segm_mAP": 0.8297, "segm_mAP_50": 0.932, "segm_mAP_75": 0.8966, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.7182, "segm_mAP_l": 0.8914, "segm_mAP_copypaste": "0.8297 0.9320 0.8966 0.2525 0.7182 0.8914"}
{"mode": "train", "epoch": 20, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.11378, "loss_rpn_cls": 0.00279, "loss_rpn_bbox": 0.01099, "loss_cls": 0.04201, "acc": 98.40625, "loss_bbox": 0.09044, "loss_mask": 0.07323, "loss": 0.21947, "time": 0.39558}
{"mode": "train", "epoch": 20, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01738, "loss_rpn_cls": 0.00395, "loss_rpn_bbox": 0.00645, "loss_cls": 0.02544, "acc": 98.96094, "loss_bbox": 0.05149, "loss_mask": 0.05445, "loss": 0.14179, "time": 0.2886}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7624, "bbox_mAP_50": 0.9171, "bbox_mAP_75": 0.8882, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7249, "bbox_mAP_l": 0.8127, "bbox_mAP_copypaste": "0.7624 0.9171 0.8882 0.1515 0.7249 0.8127", "segm_mAP": 0.8285, "segm_mAP_50": 0.9171, "segm_mAP_75": 0.906, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7178, "segm_mAP_l": 0.8966, "segm_mAP_copypaste": "0.8285 0.9171 0.9060 0.3030 0.7178 0.8966"}
{"mode": "train", "epoch": 21, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.10549, "loss_rpn_cls": 0.00659, "loss_rpn_bbox": 0.00592, "loss_cls": 0.03163, "acc": 98.72656, "loss_bbox": 0.06953, "loss_mask": 0.05992, "loss": 0.17359, "time": 0.38255}
{"mode": "train", "epoch": 21, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01856, "loss_rpn_cls": 0.00357, "loss_rpn_bbox": 0.00785, "loss_cls": 0.0352, "acc": 98.55469, "loss_bbox": 0.0738, "loss_mask": 0.0619, "loss": 0.18233, "time": 0.29707}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7811, "bbox_mAP_50": 0.9195, "bbox_mAP_75": 0.8899, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.7046, "bbox_mAP_l": 0.8441, "bbox_mAP_copypaste": "0.7811 0.9195 0.8899 0.1010 0.7046 0.8441", "segm_mAP": 0.8271, "segm_mAP_50": 0.9195, "segm_mAP_75": 0.8899, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.718, "segm_mAP_l": 0.8982, "segm_mAP_copypaste": "0.8271 0.9195 0.8899 0.2525 0.7180 0.8982"}
{"mode": "train", "epoch": 22, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.11168, "loss_rpn_cls": 0.00261, "loss_rpn_bbox": 0.01115, "loss_cls": 0.04308, "acc": 98.24219, "loss_bbox": 0.09232, "loss_mask": 0.06859, "loss": 0.21775, "time": 0.39807}
{"mode": "train", "epoch": 22, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01445, "loss_rpn_cls": 0.00341, "loss_rpn_bbox": 0.00852, "loss_cls": 0.0286, "acc": 98.90625, "loss_bbox": 0.06427, "loss_mask": 0.06368, "loss": 0.16848, "time": 0.28736}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7697, "bbox_mAP_50": 0.9174, "bbox_mAP_75": 0.8881, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6877, "bbox_mAP_l": 0.8302, "bbox_mAP_copypaste": "0.7697 0.9174 0.8881 0.1010 0.6877 0.8302", "segm_mAP": 0.8284, "segm_mAP_50": 0.9174, "segm_mAP_75": 0.8881, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.7136, "segm_mAP_l": 0.8964, "segm_mAP_copypaste": "0.8284 0.9174 0.8881 0.2525 0.7136 0.8964"}
{"mode": "train", "epoch": 23, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.10898, "loss_rpn_cls": 0.00219, "loss_rpn_bbox": 0.00708, "loss_cls": 0.03182, "acc": 98.67188, "loss_bbox": 0.06612, "loss_mask": 0.06152, "loss": 0.16873, "time": 0.38194}
{"mode": "train", "epoch": 23, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01248, "loss_rpn_cls": 0.00224, "loss_rpn_bbox": 0.00667, "loss_cls": 0.02728, "acc": 98.79688, "loss_bbox": 0.0588, "loss_mask": 0.04958, "loss": 0.14457, "time": 0.28682}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.787, "bbox_mAP_50": 0.9343, "bbox_mAP_75": 0.8549, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.7793, "bbox_mAP_l": 0.829, "bbox_mAP_copypaste": "0.7870 0.9343 0.8549 0.0505 0.7793 0.8290", "segm_mAP": 0.8268, "segm_mAP_50": 0.9343, "segm_mAP_75": 0.8758, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.7419, "segm_mAP_l": 0.8798, "segm_mAP_copypaste": "0.8268 0.9343 0.8758 0.2525 0.7419 0.8798"}
{"mode": "train", "epoch": 24, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.11205, "loss_rpn_cls": 0.00537, "loss_rpn_bbox": 0.01189, "loss_cls": 0.05643, "acc": 97.61719, "loss_bbox": 0.09301, "loss_mask": 0.07412, "loss": 0.2408, "time": 0.39458}
{"mode": "train", "epoch": 24, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01589, "loss_rpn_cls": 0.00405, "loss_rpn_bbox": 0.00708, "loss_cls": 0.03105, "acc": 98.71875, "loss_bbox": 0.06051, "loss_mask": 0.05257, "loss": 0.15527, "time": 0.28546}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7821, "bbox_mAP_50": 0.9317, "bbox_mAP_75": 0.8922, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.7551, "bbox_mAP_l": 0.8264, "bbox_mAP_copypaste": "0.7821 0.9317 0.8922 0.1010 0.7551 0.8264", "segm_mAP": 0.8432, "segm_mAP_50": 0.9317, "segm_mAP_75": 0.9052, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7627, "segm_mAP_l": 0.896, "segm_mAP_copypaste": "0.8432 0.9317 0.9052 0.1515 0.7627 0.8960"}
{"mode": "train", "epoch": 25, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.11145, "loss_rpn_cls": 0.00604, "loss_rpn_bbox": 0.00857, "loss_cls": 0.02888, "acc": 98.85938, "loss_bbox": 0.05798, "loss_mask": 0.05506, "loss": 0.15654, "time": 0.39193}
{"mode": "train", "epoch": 25, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01533, "loss_rpn_cls": 0.00252, "loss_rpn_bbox": 0.01203, "loss_cls": 0.04428, "acc": 98.10938, "loss_bbox": 0.09566, "loss_mask": 0.06958, "loss": 0.22407, "time": 0.2861}
{"mode": "val", "epoch": 25, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7867, "bbox_mAP_50": 0.9183, "bbox_mAP_75": 0.8876, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.7121, "bbox_mAP_l": 0.8422, "bbox_mAP_copypaste": "0.7867 0.9183 0.8876 0.2020 0.7121 0.8422", "segm_mAP": 0.8222, "segm_mAP_50": 0.9183, "segm_mAP_75": 0.8876, "segm_mAP_s": 0.1262, "segm_mAP_m": 0.7032, "segm_mAP_l": 0.8962, "segm_mAP_copypaste": "0.8222 0.9183 0.8876 0.1262 0.7032 0.8962"}
{"mode": "train", "epoch": 26, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.1077, "loss_rpn_cls": 0.00314, "loss_rpn_bbox": 0.0138, "loss_cls": 0.04133, "acc": 98.4375, "loss_bbox": 0.09471, "loss_mask": 0.06957, "loss": 0.22256, "time": 0.39171}
{"mode": "train", "epoch": 26, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.0132, "loss_rpn_cls": 0.00142, "loss_rpn_bbox": 0.00533, "loss_cls": 0.02507, "acc": 99.05469, "loss_bbox": 0.05205, "loss_mask": 0.05018, "loss": 0.13405, "time": 0.28282}
{"mode": "val", "epoch": 26, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7646, "bbox_mAP_50": 0.906, "bbox_mAP_75": 0.8506, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.6751, "bbox_mAP_l": 0.8286, "bbox_mAP_copypaste": "0.7646 0.9060 0.8506 0.1515 0.6751 0.8286", "segm_mAP": 0.8151, "segm_mAP_50": 0.906, "segm_mAP_75": 0.8688, "segm_mAP_s": 0.1262, "segm_mAP_m": 0.664, "segm_mAP_l": 0.9012, "segm_mAP_copypaste": "0.8151 0.9060 0.8688 0.1262 0.6640 0.9012"}
{"mode": "train", "epoch": 27, "iter": 25, "lr": 0.0001, "memory": 4294, "data_time": 0.1121, "loss_rpn_cls": 0.0027, "loss_rpn_bbox": 0.01, "loss_cls": 0.03303, "acc": 98.66406, "loss_bbox": 0.0702, "loss_mask": 0.05386, "loss": 0.16978, "time": 0.39471}
{"mode": "train", "epoch": 27, "iter": 50, "lr": 0.0001, "memory": 4294, "data_time": 0.01489, "loss_rpn_cls": 0.0034, "loss_rpn_bbox": 0.00916, "loss_cls": 0.05344, "acc": 98.07031, "loss_bbox": 0.09183, "loss_mask": 0.07029, "loss": 0.22812, "time": 0.2908}
{"mode": "val", "epoch": 27, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7734, "bbox_mAP_50": 0.9143, "bbox_mAP_75": 0.88, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.6932, "bbox_mAP_l": 0.8336, "bbox_mAP_copypaste": "0.7734 0.9143 0.8800 0.1515 0.6932 0.8336", "segm_mAP": 0.8331, "segm_mAP_50": 0.9143, "segm_mAP_75": 0.8981, "segm_mAP_s": 0.3535, "segm_mAP_m": 0.7067, "segm_mAP_l": 0.9035, "segm_mAP_copypaste": "0.8331 0.9143 0.8981 0.3535 0.7067 0.9035"}
{"mode": "train", "epoch": 28, "iter": 25, "lr": 1e-05, "memory": 4294, "data_time": 0.12662, "loss_rpn_cls": 0.00374, "loss_rpn_bbox": 0.00979, "loss_cls": 0.03547, "acc": 98.74219, "loss_bbox": 0.0724, "loss_mask": 0.05018, "loss": 0.17159, "time": 0.40179}
{"mode": "train", "epoch": 28, "iter": 50, "lr": 1e-05, "memory": 4294, "data_time": 0.01026, "loss_rpn_cls": 0.00237, "loss_rpn_bbox": 0.00735, "loss_cls": 0.03315, "acc": 98.67969, "loss_bbox": 0.06751, "loss_mask": 0.06372, "loss": 0.1741, "time": 0.24336}
{"mode": "val", "epoch": 28, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7826, "bbox_mAP_50": 0.9141, "bbox_mAP_75": 0.8804, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7297, "bbox_mAP_l": 0.8374, "bbox_mAP_copypaste": "0.7826 0.9141 0.8804 0.1515 0.7297 0.8374", "segm_mAP": 0.8344, "segm_mAP_50": 0.9141, "segm_mAP_75": 0.8985, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7266, "segm_mAP_l": 0.9015, "segm_mAP_copypaste": "0.8344 0.9141 0.8985 0.3030 0.7266 0.9015"}
{"mode": "train", "epoch": 29, "iter": 25, "lr": 1e-05, "memory": 4294, "data_time": 0.11169, "loss_rpn_cls": 0.00404, "loss_rpn_bbox": 0.01332, "loss_cls": 0.03703, "acc": 98.42188, "loss_bbox": 0.06871, "loss_mask": 0.05909, "loss": 0.18219, "time": 0.40218}
{"mode": "train", "epoch": 29, "iter": 50, "lr": 1e-05, "memory": 4294, "data_time": 0.01365, "loss_rpn_cls": 0.00141, "loss_rpn_bbox": 0.00401, "loss_cls": 0.02285, "acc": 99.07031, "loss_bbox": 0.04901, "loss_mask": 0.04467, "loss": 0.12196, "time": 0.28015}
{"mode": "val", "epoch": 29, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7971, "bbox_mAP_50": 0.9144, "bbox_mAP_75": 0.8815, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7434, "bbox_mAP_l": 0.8532, "bbox_mAP_copypaste": "0.7971 0.9144 0.8815 0.1515 0.7434 0.8532", "segm_mAP": 0.8362, "segm_mAP_50": 0.9144, "segm_mAP_75": 0.8996, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7345, "segm_mAP_l": 0.9027, "segm_mAP_copypaste": "0.8362 0.9144 0.8996 0.3030 0.7345 0.9027"}
{"mode": "train", "epoch": 30, "iter": 25, "lr": 1e-05, "memory": 4294, "data_time": 0.10713, "loss_rpn_cls": 0.00262, "loss_rpn_bbox": 0.00685, "loss_cls": 0.03013, "acc": 98.72656, "loss_bbox": 0.06276, "loss_mask": 0.05996, "loss": 0.16232, "time": 0.39049}
{"mode": "train", "epoch": 30, "iter": 50, "lr": 1e-05, "memory": 4294, "data_time": 0.01877, "loss_rpn_cls": 0.00168, "loss_rpn_bbox": 0.00721, "loss_cls": 0.03445, "acc": 98.625, "loss_bbox": 0.06138, "loss_mask": 0.05542, "loss": 0.16014, "time": 0.29389}
{"mode": "val", "epoch": 30, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7918, "bbox_mAP_50": 0.9201, "bbox_mAP_75": 0.8871, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7197, "bbox_mAP_l": 0.851, "bbox_mAP_copypaste": "0.7918 0.9201 0.8871 0.1515 0.7197 0.8510", "segm_mAP": 0.8449, "segm_mAP_50": 0.9201, "segm_mAP_75": 0.9052, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7291, "segm_mAP_l": 0.9161, "segm_mAP_copypaste": "0.8449 0.9201 0.9052 0.3030 0.7291 0.9161"}
{"mode": "train", "epoch": 31, "iter": 25, "lr": 1e-05, "memory": 4294, "data_time": 0.1116, "loss_rpn_cls": 0.00229, "loss_rpn_bbox": 0.00771, "loss_cls": 0.02827, "acc": 98.95312, "loss_bbox": 0.05999, "loss_mask": 0.0535, "loss": 0.15175, "time": 0.38688}
{"mode": "train", "epoch": 31, "iter": 50, "lr": 1e-05, "memory": 4294, "data_time": 0.01673, "loss_rpn_cls": 0.00477, "loss_rpn_bbox": 0.0097, "loss_cls": 0.03114, "acc": 98.66406, "loss_bbox": 0.06556, "loss_mask": 0.06054, "loss": 0.17171, "time": 0.28588}
{"mode": "val", "epoch": 31, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7886, "bbox_mAP_50": 0.9199, "bbox_mAP_75": 0.8872, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7219, "bbox_mAP_l": 0.8474, "bbox_mAP_copypaste": "0.7886 0.9199 0.8872 0.1515 0.7219 0.8474", "segm_mAP": 0.84, "segm_mAP_50": 0.9199, "segm_mAP_75": 0.9199, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7328, "segm_mAP_l": 0.911, "segm_mAP_copypaste": "0.8400 0.9199 0.9199 0.1515 0.7328 0.9110"}
{"mode": "train", "epoch": 32, "iter": 25, "lr": 1e-05, "memory": 4294, "data_time": 0.10987, "loss_rpn_cls": 0.00445, "loss_rpn_bbox": 0.00876, "loss_cls": 0.03152, "acc": 98.69531, "loss_bbox": 0.06563, "loss_mask": 0.05705, "loss": 0.16741, "time": 0.38707}
{"mode": "train", "epoch": 32, "iter": 50, "lr": 1e-05, "memory": 4294, "data_time": 0.01403, "loss_rpn_cls": 0.002, "loss_rpn_bbox": 0.00652, "loss_cls": 0.02819, "acc": 98.83594, "loss_bbox": 0.05659, "loss_mask": 0.05452, "loss": 0.14783, "time": 0.29166}
{"mode": "val", "epoch": 32, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7857, "bbox_mAP_50": 0.9197, "bbox_mAP_75": 0.8868, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7213, "bbox_mAP_l": 0.8441, "bbox_mAP_copypaste": "0.7857 0.9197 0.8868 0.1515 0.7213 0.8441", "segm_mAP": 0.8352, "segm_mAP_50": 0.9197, "segm_mAP_75": 0.905, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7234, "segm_mAP_l": 0.91, "segm_mAP_copypaste": "0.8352 0.9197 0.9050 0.1515 0.7234 0.9100"}
{"mode": "train", "epoch": 33, "iter": 25, "lr": 1e-05, "memory": 4294, "data_time": 0.11439, "loss_rpn_cls": 0.00161, "loss_rpn_bbox": 0.01087, "loss_cls": 0.03718, "acc": 98.5, "loss_bbox": 0.08209, "loss_mask": 0.06944, "loss": 0.2012, "time": 0.39841}
{"mode": "train", "epoch": 33, "iter": 50, "lr": 1e-05, "memory": 4294, "data_time": 0.01454, "loss_rpn_cls": 0.00188, "loss_rpn_bbox": 0.00362, "loss_cls": 0.02136, "acc": 99.17188, "loss_bbox": 0.04157, "loss_mask": 0.04387, "loss": 0.1123, "time": 0.28688}
{"mode": "val", "epoch": 33, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.8011, "bbox_mAP_50": 0.9393, "bbox_mAP_75": 0.8976, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7499, "bbox_mAP_l": 0.8469, "bbox_mAP_copypaste": "0.8011 0.9393 0.8976 0.1515 0.7499 0.8469", "segm_mAP": 0.8472, "segm_mAP_50": 0.936, "segm_mAP_75": 0.9102, "segm_mAP_s": 0.303, "segm_mAP_m": 0.7486, "segm_mAP_l": 0.9044, "segm_mAP_copypaste": "0.8472 0.9360 0.9102 0.3030 0.7486 0.9044"}
{"mode": "train", "epoch": 34, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.11054, "loss_rpn_cls": 0.0025, "loss_rpn_bbox": 0.00485, "loss_cls": 0.02466, "acc": 99.0, "loss_bbox": 0.04682, "loss_mask": 0.04874, "loss": 0.12757, "time": 0.38205}
{"mode": "train", "epoch": 34, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.01327, "loss_rpn_cls": 0.00276, "loss_rpn_bbox": 0.00681, "loss_cls": 0.02709, "acc": 98.875, "loss_bbox": 0.05016, "loss_mask": 0.0449, "loss": 0.13171, "time": 0.29292}
{"mode": "val", "epoch": 34, "iter": 13, "lr": 0.0, "bbox_mAP": 0.8018, "bbox_mAP_50": 0.9385, "bbox_mAP_75": 0.8971, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7499, "bbox_mAP_l": 0.849, "bbox_mAP_copypaste": "0.8018 0.9385 0.8971 0.1515 0.7499 0.8490", "segm_mAP": 0.847, "segm_mAP_50": 0.9347, "segm_mAP_75": 0.9093, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7553, "segm_mAP_l": 0.9027, "segm_mAP_copypaste": "0.8470 0.9347 0.9093 0.1515 0.7553 0.9027"}
{"mode": "train", "epoch": 35, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.1109, "loss_rpn_cls": 0.00137, "loss_rpn_bbox": 0.0046, "loss_cls": 0.02181, "acc": 99.125, "loss_bbox": 0.04759, "loss_mask": 0.05132, "loss": 0.1267, "time": 0.38466}
{"mode": "train", "epoch": 35, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.01206, "loss_rpn_cls": 0.00235, "loss_rpn_bbox": 0.00803, "loss_cls": 0.02813, "acc": 98.8125, "loss_bbox": 0.05596, "loss_mask": 0.04449, "loss": 0.13897, "time": 0.28769}
{"mode": "val", "epoch": 35, "iter": 13, "lr": 0.0, "bbox_mAP": 0.8003, "bbox_mAP_50": 0.9389, "bbox_mAP_75": 0.8975, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7522, "bbox_mAP_l": 0.8457, "bbox_mAP_copypaste": "0.8003 0.9389 0.8975 0.1515 0.7522 0.8457", "segm_mAP": 0.8431, "segm_mAP_50": 0.9351, "segm_mAP_75": 0.9096, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7501, "segm_mAP_l": 0.9003, "segm_mAP_copypaste": "0.8431 0.9351 0.9096 0.1515 0.7501 0.9003"}
{"mode": "train", "epoch": 36, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.11556, "loss_rpn_cls": 0.00355, "loss_rpn_bbox": 0.00757, "loss_cls": 0.0356, "acc": 98.58594, "loss_bbox": 0.07443, "loss_mask": 0.05952, "loss": 0.18067, "time": 0.39084}
{"mode": "train", "epoch": 36, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.0123, "loss_rpn_cls": 0.00273, "loss_rpn_bbox": 0.00634, "loss_cls": 0.02338, "acc": 99.125, "loss_bbox": 0.04773, "loss_mask": 0.05264, "loss": 0.13282, "time": 0.28771}
{"mode": "val", "epoch": 36, "iter": 13, "lr": 0.0, "bbox_mAP": 0.7945, "bbox_mAP_50": 0.9389, "bbox_mAP_75": 0.8976, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7522, "bbox_mAP_l": 0.8384, "bbox_mAP_copypaste": "0.7945 0.9389 0.8976 0.1515 0.7522 0.8384", "segm_mAP": 0.8431, "segm_mAP_50": 0.9352, "segm_mAP_75": 0.9098, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7598, "segm_mAP_l": 0.8979, "segm_mAP_copypaste": "0.8431 0.9352 0.9098 0.1515 0.7598 0.8979"}
{"mode": "train", "epoch": 37, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.10964, "loss_rpn_cls": 0.0042, "loss_rpn_bbox": 0.01171, "loss_cls": 0.03593, "acc": 98.57812, "loss_bbox": 0.06821, "loss_mask": 0.07626, "loss": 0.1963, "time": 0.38716}
{"mode": "train", "epoch": 37, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.01384, "loss_rpn_cls": 0.00206, "loss_rpn_bbox": 0.00387, "loss_cls": 0.02157, "acc": 99.10156, "loss_bbox": 0.04958, "loss_mask": 0.04931, "loss": 0.12639, "time": 0.28864}
{"mode": "val", "epoch": 37, "iter": 13, "lr": 0.0, "bbox_mAP": 0.7946, "bbox_mAP_50": 0.9391, "bbox_mAP_75": 0.8977, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7605, "bbox_mAP_l": 0.8351, "bbox_mAP_copypaste": "0.7946 0.9391 0.8977 0.1515 0.7605 0.8351", "segm_mAP": 0.8431, "segm_mAP_50": 0.9353, "segm_mAP_75": 0.91, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7567, "segm_mAP_l": 0.8979, "segm_mAP_copypaste": "0.8431 0.9353 0.9100 0.1515 0.7567 0.8979"}
{"mode": "train", "epoch": 38, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.10504, "loss_rpn_cls": 0.00183, "loss_rpn_bbox": 0.00681, "loss_cls": 0.03342, "acc": 98.67188, "loss_bbox": 0.05937, "loss_mask": 0.04914, "loss": 0.15058, "time": 0.38957}
{"mode": "train", "epoch": 38, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.01585, "loss_rpn_cls": 0.00183, "loss_rpn_bbox": 0.00824, "loss_cls": 0.03115, "acc": 98.67188, "loss_bbox": 0.06511, "loss_mask": 0.05865, "loss": 0.16498, "time": 0.29247}
{"mode": "val", "epoch": 38, "iter": 13, "lr": 0.0, "bbox_mAP": 0.7917, "bbox_mAP_50": 0.9391, "bbox_mAP_75": 0.8977, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7605, "bbox_mAP_l": 0.8318, "bbox_mAP_copypaste": "0.7917 0.9391 0.8977 0.1515 0.7605 0.8318", "segm_mAP": 0.8416, "segm_mAP_50": 0.9353, "segm_mAP_75": 0.91, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7476, "segm_mAP_l": 0.9003, "segm_mAP_copypaste": "0.8416 0.9353 0.9100 0.1515 0.7476 0.9003"}
{"mode": "train", "epoch": 39, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.12898, "loss_rpn_cls": 0.00292, "loss_rpn_bbox": 0.00997, "loss_cls": 0.04173, "acc": 98.375, "loss_bbox": 0.08529, "loss_mask": 0.06646, "loss": 0.20636, "time": 0.41195}
{"mode": "train", "epoch": 39, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.01185, "loss_rpn_cls": 0.00151, "loss_rpn_bbox": 0.00452, "loss_cls": 0.0221, "acc": 99.13281, "loss_bbox": 0.04188, "loss_mask": 0.04055, "loss": 0.11056, "time": 0.2825}
{"mode": "val", "epoch": 39, "iter": 13, "lr": 0.0, "bbox_mAP": 0.7987, "bbox_mAP_50": 0.9385, "bbox_mAP_75": 0.8973, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7605, "bbox_mAP_l": 0.8421, "bbox_mAP_copypaste": "0.7987 0.9385 0.8973 0.1515 0.7605 0.8421", "segm_mAP": 0.844, "segm_mAP_50": 0.9348, "segm_mAP_75": 0.9095, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7501, "segm_mAP_l": 0.9006, "segm_mAP_copypaste": "0.8440 0.9348 0.9095 0.1515 0.7501 0.9006"}
{"mode": "train", "epoch": 40, "iter": 25, "lr": 0.0, "memory": 4294, "data_time": 0.11449, "loss_rpn_cls": 0.00227, "loss_rpn_bbox": 0.0068, "loss_cls": 0.02918, "acc": 98.89844, "loss_bbox": 0.05198, "loss_mask": 0.05285, "loss": 0.14308, "time": 0.39891}
{"mode": "train", "epoch": 40, "iter": 50, "lr": 0.0, "memory": 4294, "data_time": 0.01634, "loss_rpn_cls": 0.00251, "loss_rpn_bbox": 0.00706, "loss_cls": 0.03522, "acc": 98.63281, "loss_bbox": 0.0721, "loss_mask": 0.06562, "loss": 0.18251, "time": 0.29119}
{"mode": "val", "epoch": 40, "iter": 13, "lr": 0.0, "bbox_mAP": 0.7957, "bbox_mAP_50": 0.9184, "bbox_mAP_75": 0.9066, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.7344, "bbox_mAP_l": 0.8539, "bbox_mAP_copypaste": "0.7957 0.9184 0.9066 0.1515 0.7344 0.8539", "segm_mAP": 0.8392, "segm_mAP_50": 0.9184, "segm_mAP_75": 0.9184, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7328, "segm_mAP_l": 0.9102, "segm_mAP_copypaste": "0.8392 0.9184 0.9184 0.1515 0.7328 0.9102"}
